#pragma once

#include "types.h"
#include "type_conversion.h"

typedef struct ethernet_frame {
    u8 dst_mac_address[6];
    u8 src_mac_address[6];
    u8 ethertype[2];
} ethernet_frame;

#define ETHERTYPE_IPV4 0x0800
#define ETHERTYPE_ARP 0x0806
#define ETHERTYPE_WAKE_ON_LAN 0x0842
#define ETHERTYPE_IETF_TRILL 0x22F3
#define ETHERTYPE_DECNET_PHASE_IV 0x6003
#define ETHERTYPE_REVERSE_ARP 0x8035
#define ETHERTYPE_APPLETALK 0x809B
#define ETHERTYPE_APPLETALK_ARP 0x80F3
#define ETHERTYPE_VLAN_TAGGED_FRAME 0x8100
#define ETHERTYPE_IPX_1 0x8137
#define ETHERTYPE_IPX_2 0x8138
#define ETHERTYPE_QNX_QNET 0x8204
#define ETHERTYPE_IPV6 0x86DD
#define ETHERTYPE_ETHERNET_FLOW_CONTROL 0x8808
#define ETHERTYPE_SLOW_PROTOCOLS 0X8809
#define ETHERTYPE_COBRANET 0x8819
#define ETHERTYPE_MPLS_UNICAT 0x8847
#define ETHERTYPE_MPLS_MULTICAST 0x8848
#define ETHERTYPE_PPPOE_DISCOVERY_STAGE 0x8863
#define ETHERTYPE_PPPOE_SESSION_STAGE 0x8864
#define ETHERTYPE_JUMBO_FRAMES 0x8870
#define ETHERTYPE_HOMEPLUG_1DOT0_MME 0x887B
#define ETHERTYPE_EAP_OVER_LAN 0x888E
#define ETHERTYPE_PROFINET_PROTOCOL 0x8892
#define ETHERTYPE_HYPERSCSI 0x889A
#define ETHERTYPE_ATA_OVER_ETHERNET 0x88A2
#define ETHERTYPE_ETHERCAT_PROTOCOL 0x88A4
#define ETHERTYPE_PROVIDER_BRIDGING 0x88A8
#define ETHERTYPE_ETHERNET_POWERLINK 0x88AB
#define ETHERTYPE_LINK_LAYER_DISCOVERY_PROTOCOL 0x88CC
#define ETHERTYPE_SERCOS_III 0x88CD
#define ETHERTYPE_HOMEPLUG_AV_MME 0x88E1
#define ETHERTYPE_MEDIA_REDUNDANCY_PROTOCOL 0x88E3
#define ETHERTYPE_MAC_SECURITY 0x88E5
#define ETHERTYPE_PRECISION_TIME_PROTOCOL 0x88F7
#define ETHERTYPE_IEEE_CONNECTIVITY_FAULT_MANAGEMENT_PROTOCOL 0x8902
#define ETHERTYPE_FIBRE_CHANNEL_OVER_ETHERNET 0x8906
#define ETHERTYPE_FCOE_INITIALIZATION_PROTOCOL 0x8914
#define ETHERTYPE_RDMA_OVER_CONVERGED_ETHERNET 0x8915
#define ETHERTYPE_HIGH_AVAILABILITY_SEAMLESS_REDUNDANCY 0x892F
#define ETHERTYPE_ETHERNET_CONFIGURATION_TESTING_PROTOCOL0x9000
#define ETHERTYPE_Q_I_Q 0x9100
#define ETHERTYPE_VERITAS_LOW_LATENCY_TRANSPORT 0xCAFE

static inline u16 ethernet_frame_ethertype(ethernet_frame const* e) {
    return u8s_to_u16(&e->ethertype);
}

void ethernet_frame_print(ethernet_frame const* e);

